import { serve } from "https://deno.land/std@0.190.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface WhatsAppNotification {
  type: 'registration' | 'book_order' | 'payment_confirmed' | 'student_payment_confirmed' | 'student_registration';
  studentData?: any;
  orderData?: any;
  paymentData?: any;
}

const handler = async (req: Request): Promise<Response> => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const notification: WhatsAppNotification = await req.json();
    
    const evolutionApiUrl = Deno.env.get('EVOLUTION_API_URL');
    const evolutionApiKey = Deno.env.get('EVOLUTION_API_KEY');
    const instanceName = Deno.env.get('EVOLUTION_INSTANCE_NAME');
    const secretaryWhatsApp = Deno.env.get('SECRETARY_WHATSAPP_NUMBER');

    console.log("[send-whatsapp-notification] Verificando vari√°veis de ambiente:", {
      evolutionApiUrl: evolutionApiUrl ? "‚úì Configurada" : "‚úó N√£o configurada",
      evolutionApiKey: evolutionApiKey ? "‚úì Configurada" : "‚úó N√£o configurada",
      instanceName: instanceName ? "‚úì Configurada" : "‚úó N√£o configurada",
      secretaryWhatsApp: secretaryWhatsApp ? "‚úì Configurada" : "‚úó N√£o configurada",
    });

    if (!evolutionApiUrl || !evolutionApiKey || !instanceName || !secretaryWhatsApp) {
      console.error("[send-whatsapp-notification] Vari√°veis de ambiente faltando");
      return new Response(
        JSON.stringify({ 
          error: 'Configura√ß√£o incompleta: verifique as vari√°veis de ambiente',
          missing: {
            evolutionApiUrl: !evolutionApiUrl,
            evolutionApiKey: !evolutionApiKey,
            instanceName: !instanceName,
            secretaryWhatsApp: !secretaryWhatsApp
          }
        }),
        {
          status: 500,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        }
      );
    }

    console.log('[send-whatsapp-notification] Processando notifica√ß√£o:', notification.type);

    let message = '';
    let recipient = secretaryWhatsApp;

    switch (notification.type) {
      case 'registration':
        message = `üéì NOVA MATR√çCULA REALIZADA

üìã Dados do Aluno:
‚Ä¢ Nome: ${notification.studentData.nome}
‚Ä¢ CPF: ${notification.studentData.cpf}
‚Ä¢ Email: ${notification.studentData.email}
‚Ä¢ Telefone: ${notification.studentData.telefone}
‚Ä¢ Ciclo: ${notification.studentData.ciclo}

üìç Verificar dados na planilha "alunos matriculados"`;
        break;

      case 'book_order':
        message = `üìö NOVO PEDIDO DE LIVRO

üë§ Aluno: ${notification.orderData.nome_do_aluno}
üìÑ CPF: ${notification.orderData.cpf}
üìñ Livro: ${notification.orderData.livro}
üéØ Ciclo: ${notification.orderData.ciclo}
üìÖ Data: ${notification.orderData.data_pedido}

üí∞ Aguardando pagamento PIX`;
        break;

      case 'payment_confirmed':
        message = `‚úÖ PAGAMENTO CONFIRMADO

üí∞ Valor: R$ ${notification.paymentData.valor}
üë§ Aluno: ${notification.paymentData.nome}
üìÑ CPF: ${notification.paymentData.cpf}
üìñ Livro: ${notification.paymentData.livro}
üéØ Ciclo: ${notification.paymentData.ciclo}
üÜî ID Pagamento: ${notification.paymentData.pagamento_id}

üì¶ Processar envio do livro`;
        break;

      case 'student_payment_confirmed':
        message = `üéâ Parab√©ns! Seu pagamento foi confirmado!

‚úÖ Pagamento aprovado com sucesso
üìñ Livro: ${notification.paymentData.livro}
üéØ Ciclo: ${notification.paymentData.ciclo}
üí∞ Valor: R$ ${notification.paymentData.valor}

üì¶ Seu livro ser√° enviado em breve!
üìû Em caso de d√∫vidas, entre em contato conosco.

Obrigado por escolher a EETAD N√∫cleo Palmas - TO! üôè`;
        
        // Para notifica√ß√£o do aluno, usar o telefone do aluno
        recipient = notification.paymentData.telefone || secretaryWhatsApp;
        break;

      case 'student_registration':
        message = `üéì Bem-vindo(a) √† EETAD N√∫cleo Palmas - TO!

‚úÖ Sua matr√≠cula foi realizada com sucesso!

üë§ Nome: ${notification.studentData.nome}
üéØ Ciclo: ${notification.studentData.ciclo}
üìß Email: ${notification.studentData.email}

üìö Em breve voc√™ receber√° mais informa√ß√µes sobre como adquirir seus livros e iniciar seus estudos.

üìû Em caso de d√∫vidas, entre em contato conosco.

Que Deus aben√ßoe seus estudos! üôè`;
        
        // Para notifica√ß√£o do aluno, usar o telefone do aluno
        recipient = notification.studentData.telefone || secretaryWhatsApp;
        break;

      default:
        throw new Error(`Tipo de notifica√ß√£o n√£o suportado: ${notification.type}`);
    }

    // Normalizar URL da Evolution API
    const baseUrl = evolutionApiUrl.replace(/\/$/, '');
    const endpoint = `${baseUrl}/message/sendText/${encodeURIComponent(instanceName)}`;

    console.log("[send-whatsapp-notification] Tentando conectar com Evolution API:", {
      endpoint,
      instanceName,
      recipient
    });

    const whatsappPayload = {
      number: recipient,
      text: message
    };

    // Configurar timeout e retry
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 segundos timeout

    try {
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'apikey': evolutionApiKey,
          'User-Agent': 'Supabase-Edge-Function/1.0'
        },
        body: JSON.stringify(whatsappPayload),
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      console.log("[send-whatsapp-notification] Resposta da Evolution API:", {
        status: response.status,
        statusText: response.statusText,
        ok: response.ok
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error("[send-whatsapp-notification] Erro na resposta da Evolution API:", {
          status: response.status,
          statusText: response.statusText,
          body: errorText
        });
        
        // Retornar sucesso parcial em vez de erro total
        return new Response(JSON.stringify({ 
          success: false, 
          warning: `Falha ao enviar WhatsApp (${response.status}): ${response.statusText}`,
          details: errorText
        }), {
          status: 200, // Retorna 200 para n√£o quebrar o fluxo principal
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        });
      }

      const result = await response.json();
      console.log('[send-whatsapp-notification] WhatsApp enviado com sucesso:', result);

      return new Response(JSON.stringify({ 
        success: true, 
        message: 'WhatsApp enviado com sucesso',
        result 
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });

    } catch (fetchError: any) {
      clearTimeout(timeoutId);
      
      console.error('[send-whatsapp-notification] Erro de conex√£o com Evolution API:', {
        error: fetchError.message,
        name: fetchError.name,
        endpoint
      });

      // Verificar se √© erro de timeout
      if (fetchError.name === 'AbortError') {
        return new Response(JSON.stringify({ 
          success: false, 
          warning: 'Timeout ao conectar com Evolution API (30s)',
          error: 'TIMEOUT'
        }), {
          status: 200, // Retorna 200 para n√£o quebrar o fluxo principal
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        });
      }

      // Outros erros de rede
      return new Response(JSON.stringify({ 
        success: false, 
        warning: 'Falha na conex√£o com Evolution API',
        error: fetchError.message,
        endpoint
      }), {
        status: 200, // Retorna 200 para n√£o quebrar o fluxo principal
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

  } catch (error: any) {
    console.error('[send-whatsapp-notification] Erro geral:', error);
    return new Response(
      JSON.stringify({ 
        success: false,
        error: error.message || 'Erro interno do servidor',
        type: 'INTERNAL_ERROR'
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
};

serve(handler);